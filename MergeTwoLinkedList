
/*
  Merge two linked lists 
  head pointer input could be NULL as well for empty list
  Node is defined as 
    class Node
    {
        int data;
        Node next;
        Node(int d) {data = d; next = null; }
    }
*/

class LinkedList
{
    Node sortedMerge(Node head1, Node head2) 
    {
    if(head1==null) return head2;
    if(head2==null) return head1;
    Node l1,l2,res=null;
    if(head1.data<head2.data) 
    {
    l1=head1;
    l2=head2;
    }
    else
    {
    l1=head2;
    l2=head1;
    }
    res=l1;
    while(l1!=null && l2!=null)
    {
        Node tmp=null;
        while(l1!=null && l1.data<=l2.data)
        {
        tmp=l1;
        l1=l1.next;
        }
        tmp.next=l2;
        // swap l1 and l2
        Node t=l1;
        l1=l2;
        l2=t;
    }
    return res;
   } 
}

-----------------------------------------------------------------
take two pointers l1 and l2 , l1 will always point to the list head whose value is smaller.
Take one pointer result that will point to the head of the smaller value linked list , so that we could return head of the linked list in the end.
Take another variable tmp , tmp will be one step backward to l1 .
loop starts (run until we end of both the list)
take l1 node data , compare it with l2
if the data is smaller then move l1 one step ahead
else swap l1 and l2;
loop ends
return result;
